.{
    .name = .zylo,

    .version = "0.0.0",
    
    .fingerprint = 0x6aa39459ac5134e9, // Changing this has security and trust implications.

    .minimum_zig_version = "0.14.0",

    .dependencies = .{
        .sdl2 = .{
            .url = "https://github.com/libsdl-org/SDL/releases/download/release-2.30.5/SDL2-2.30.5.tar.gz",
            .hash = "122040532bcef655b7afd21dbaa87b3c28f55658e532d3f6c8064de7792407ce3d46",
        },
        .imgui = .{
            .url = "https://github.com/ocornut/imgui/archive/refs/tags/v1.90.9-docking.tar.gz",
            .hash = "1220854ebf6bca15874cac634f0c9e39145cc0d13c1cf74822b6ed3073e906a4f8d5",
        },
        .imguizmo = .{
            .url = "https://github.com/CedricGuillemet/ImGuizmo/archive/refs/heads/master.zip",
            .hash = "1220e115522ddaabd1663ccb56ab627edd2e4a30b8e5da16f9f2524b1f5622efc604",
        },
        //.cimgui = .{
        //    .url = "https://github.com/cimgui/cimgui.git",
        //    .hash = "N-V-__8AAFazMQANNEEqT1BjGV0DPelAWyMMBYpr0D_zuPt5",
        //    .lazy = false,
        //},
        // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
        //.example = .{
        //    // When updating this field to a new URL, be sure to delete the corresponding
        //    // `hash`, otherwise you are communicating that you expect to find the old hash at
        //    // the new URL. If the contents of a URL change this will result in a hash mismatch
        //    // which will prevent zig from using it.
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // This is computed from the file contents of the directory of files that is
        //    // obtained after fetching `url` and applying the inclusion rules given by
        //    // `paths`.
        //    //
        //    // This field is the source of truth; packages do not come from a `url`; they
        //    // come from a `hash`. `url` is just one of many possible mirrors for how to
        //    // obtain a package matching this `hash`.
        //    //
        //    // Uses the [multihash](https://multiformats.io/multihash/) format.
        //    .hash = "...",
        //
        //    // When this is provided, the package is found in a directory relative to the
        //    // build root. In this case the package's hash is irrelevant and therefore not
        //    // computed. This field and `url` are mutually exclusive.
        //    .path = "foo",
        //
        //    // When this is set to `true`, a package is declared to be lazily
        //    // fetched. This makes the dependency only get fetched if it is
        //    // actually used.
        //    .lazy = false,
        //},
    },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package. Only files listed here will remain on disk
    // when using the zig package manager. As a rule of thumb, one should list
    // files required for compilation plus any license(s).
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        // For example...
        //"LICENSE",
        //"README.md",
    },
}
